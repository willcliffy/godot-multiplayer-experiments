extends Node

# To prevent the other core scripts from becoming too large, some of their
# utility functions are written here (only the functions that don't disturb
# reading the core code, mostly data validation and other verbose checks).


const ProtonScatter := preload("../scatter.gd")
const ProtonScatterItem := preload("../scatter_item.gd")
const ModifierStack := preload("../stack/modifier_stack.gd")

### SCATTER UTILITY FUNCTIONS ###


# Make sure the output node exists. This is the parent node to
# everything generated by the scatter mesh
static func ensure_output_root_exists(s: ProtonScatter) -> void:
	# Check if the node exists in the tree
	if not s.output_root:
		s.output_root = s.get_node_or_null("ScatterOutput")

	# If the node is valid, end here
	if is_instance_valid(s.output_root) and s.has_node(NodePath(s.output_root.name)):
		enforce_output_root_owner(s)
		return

	# Some conditions are not met, cleanup and recreate the root
	if s.output_root:
		if s.has_node(NodePath(s.output_root.name)):
			s.remove_node(s.output_root.name)
		s.output_root.queue_free()
		s.output_root = null

	s.output_root = Marker3D.new()
	s.output_root.name = "ScatterOutput"
	s.add_child(s.output_root, true)
	enforce_output_root_owner(s)


static func enforce_output_root_owner(s: ProtonScatter) -> void:
	if is_instance_valid(s.output_root) and s.is_inside_tree():
		if s.show_output_in_tree:
			set_owner_recursive(s.output_root, s.get_tree().get_edited_scene_root())
		else:
			set_owner_recursive(s.output_root, null)

		# TMP: Workaround to force the scene tree to update and take in account
		# the owner changes. Otherwise it doesn't show until much later.
		s.output_root.update_configuration_warnings()


# Item root is a Node3D placed as a child of the ScatterOutput node.
# Each ScatterItem has a corresponding output node, serving as a parent for
# the Multimeshes or duplicates generated by the Scatter node.
static func get_or_create_item_root(item: ProtonScatterItem) -> Node3D:
	var s: ProtonScatter = item.get_parent()
	ensure_output_root_exists(s)
	var item_root: Node3D = s.output_root.get_node_or_null(NodePath(item.name))

	if not item_root:
		item_root = Node3D.new()
		s.output_root.add_child(item_root)
		item_root.name = item.name
		if Engine.is_editor_hint():
			item_root.owner = item_root.get_tree().get_edited_scene_root()

	return item_root


static func get_or_create_multimesh(item: ProtonScatterItem, count: int) -> MultiMeshInstance3D:
	var item_root := get_or_create_item_root(item)
	var mmi: MultiMeshInstance3D = item_root.get_node_or_null("MultiMeshInstance3D")

	if not mmi:
		mmi = MultiMeshInstance3D.new()
		item_root.add_child(mmi)
		mmi.set_owner(item_root.owner)
		mmi.set_name("MultiMeshInstance3D")

	if not mmi.multimesh:
		mmi.multimesh = MultiMesh.new()

	mmi.position = Vector3.ZERO
	# item.update_shadows()

	var node = item.get_item()
	var mesh_instance: MeshInstance3D = get_merged_meshes_from(node)
	if not mesh_instance:
		return

	mmi.multimesh.instance_count = 0 # Set this to zero or you can't change the other values
	mmi.multimesh.mesh = mesh_instance.mesh
	mmi.multimesh.transform_format = 1
	mmi.multimesh.instance_count = count

	mesh_instance.queue_free()

	return mmi


# Called from child nodes who affect the rebuild process (like ScatterShape)
# Usually, it would be the Scatter node responsibility to listen to changes from
# the children nodes, but keeping track of the children is annoying (they can
# be moved around from a Scatter node to another, or put under a wrong node, or
# other edge cases).
# So instead, when a child changed, it notifies the parent Scatter node through
# this method.
static func request_parent_to_rebuild(node: Node, deferred := false) -> void:
	var parent = node.get_parent()
	if not parent or not parent.is_inside_tree():
		return

	if parent and parent is ProtonScatter:
		if deferred:
			parent.rebuild.call_deferred(true)
		else:
			parent.rebuild(true)


### MESH UTILITY ###

# Recursively search for all MeshInstances3D in the node's children and
# returns them all in an array. If node is a MeshInstance, it will also be
# added to the array
static func get_all_mesh_instances_from(node: Node3D) -> Array[MeshInstance3D]:
	var res: Array[MeshInstance3D] = []

	if node is MeshInstance3D:
		res.push_back(node)

	for c in node.get_children():
		res.append_array(get_all_mesh_instances_from(c))

	return res


# Find all the meshes below node and create a new single mesh with multiple
# surfaces from all of them.
static func get_merged_meshes_from(node: Node) -> MeshInstance3D:
	if not node:
		return null

	# Reset node transform for this step, overwise they'll stack
	var transform_backup: Transform3D
	if node.is_inside_tree():
		transform_backup = node.get_global_transform()
		node.global_transform = Transform3D()
	else:
		transform_backup = node.transform
		node.transform = Transform3D()

	var instances: Array[MeshInstance3D] = get_all_mesh_instances_from(node)
	if instances.is_empty():
		return null

	var total_surfaces = 0
	var array_mesh = ArrayMesh.new()

	for i in instances.size():
		var mi: MeshInstance3D = instances[i]
		var mesh: Mesh = mi.mesh
		var surface_count = mesh.get_surface_count()
		var material_override = mi.get_material_override()
		var inverse_transform: Transform3D
		if mi.is_inside_tree():
			inverse_transform = mi.global_transform.affine_inverse()
		else:
			inverse_transform = mi.transform.affine_inverse()

		for j in surface_count:
			var arrays = mesh.surface_get_arrays(j)
			var length = arrays[ArrayMesh.ARRAY_VERTEX].size()

			for k in length:
				var pos: Vector3 = arrays[ArrayMesh.ARRAY_VERTEX][k]
				pos = pos * inverse_transform
				arrays[ArrayMesh.ARRAY_VERTEX][k] = pos

			array_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)

			# Retrieve the material on the MeshInstance first, if none is defined,
			# use the one from the mesh resource.
			var material: Material
			if material_override:
				material = material_override
			else:
				material = mi.get_surface_override_material(j)
			if not material:
				material = mesh.surface_get_material(j)
			array_mesh.surface_set_material(total_surfaces, material)

			total_surfaces += 1

	# Restore node initial transform
	if node.is_inside_tree():
		node.global_transform = transform_backup
	else:
		node.transform = transform_backup

	# Return merged mesh
	var res := MeshInstance3D.new()
	res.mesh = array_mesh
	return res


static func set_owner_recursive(node: Node, new_owner) -> void:
	node.set_owner(new_owner)
	for c in node.get_children():
		set_owner_recursive(c, new_owner)
